set show loop stats on .
set show loop timing on .

(fmod PURE is
    protecting QID .

    sorts PSort Term TermType Context .
    subsort TermType < Context .

    op Ty : -> PSort [ctor] .
    op Ki : -> PSort [ctor] .

    op empty : -> Context .
    op _:_ : Term Term -> TermType [ctor] .
    op _`,_ : Context Context -> Context [ ctor assoc comm id: empty ] .

    subsort Qid < Term .
    subsort PSort < Term .

    op __ : Term Term -> Term .
    op lambda_:_._ : Qid Term Term -> Term [ctor] .
    op Pi_:_._ : Qid Term Term -> Term [ctor] .

    op _in_ : TermType Context -> Bool .
    op ruleAxiom : PSort PSort -> PSort .
    op _|-_ : Context Term -> Term .

    op contextSub : Context Term Qid -> Context .
    op subs : Term Term Qid -> Term .

    vars Gamma Delta : Context .
    vars A B C D E F T T1 T2 : Term .
    vars R S S1 S2 S3 : PSort .
    vars X Y Z : Qid .

    eq (X : T) in (Gamma, X : T) = true .
    eq (X : T) in Gamma = false [owise] .

    eq subs(S, T, X) = S .
    eq subs(Y, T, X) = if X == Y then T else Y fi .
    eq subs(A B, T, X) = subs(A, T, X) subs(B, T, X) .
    eq subs(lambda Y : T1 . T2, T, X) = (lambda Y : subs(T1, T, X) . subs(T2, T, X)) .
    eq subs(Pi Y : T1 . T2, T, X) = ( Pi Y : subs(T1, T, X) . subs(T2, T, X) ) .

    eq contextSub(empty, T, X) = empty .
    eq contextSub((Gamma, A : B), T, X) = contextSub(Gamma, T, X), (subs(A, T, X) : subs(B, T, X)) .

    eq (lambda X : T . E) A = subs(E, A, X) .

    --- Typing rules:

    --- Axioms/Rules
    eq Gamma |- Ty = Ki .

    eq ruleAxiom(Ty, Ty) = Ty .
    eq ruleAxiom(Ty, Ki) = Ki .

    --- Var
    ceq (Gamma, X : T) |- X = T
        if S := Gamma |- T .

    --- Abs
    ceq Gamma |- lambda X : T1 . E = Pi X : T1 . T2
        if Gamma |- T1 = Ty /\
           T2 := (Gamma, X : T1) |- E .

    --- Pi
    ceq Gamma |- Pi X : T1 . T2 = ruleAxiom(S1, S2)
        if S1 := Gamma |- T1 /\
           S2 := (Gamma, X : T1) |- T2 .

    --- App
    ceq Gamma |- (A B) = subs(T2, B, X)
        if (Pi X : T1 . T2) := Gamma |- A /\
           T1 = Gamma |- B .

endfm)

(reduce ('Vec : Pi 'n : 'nat . Ty),
        ('head : Pi 'n : 'nat . Pi 'xs : ('Vec ('S 'n)) . 'nat),
        ('nil : 'Vec 'Z),
        ('cons : Pi 'n : 'nat . Pi 'x : 'nat . Pi 'xs : ('Vec 'n). ('Vec ('S 'n))),
        ('nat : Ty),
        ('Z : 'nat),
        ('S : Pi 'n : 'nat . 'nat)
        |- (('head 'Z) ((('cons 'Z) 'Z) 'nil)) .)

(select tool ITP .)

(goal blah : NAT |- A{N:Nat, M:Nat} (N + M == M) .)

--- (goal substitution : PURE |-
---     A{Gamma:Context, X:Qid, T1:Term, T2:Term, M:Term, N:Term}
---         (((Gamma, X : T1) |- M == T2) and (Gamma |- N == T1)) ==> (contextSub(Gamma, N, X) |- subs(M, N, X) == T2) .)

